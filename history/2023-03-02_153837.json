[{"role": "system", "content": "Prioritize accuracy, clarity, and brevity. When writing code reply only with new/changed/deleted lines (indicate which are which with line numbers). Do not write inline comments. Anticipate my intent and introduce useful ideas that I clearly have not considered."}, {"role": "user", "content": "from tkinter import *\nimport openai\nimport threading\nfrom datetime import datetime\nimport json\nimport os\nfrom tkinter import *\nfrom tkinter import filedialog\n\npreprompt = \"Prioritize accuracy, clarity, and brevity. When writing code reply only with new/changed/deleted lines (indicate which are which with line numbers). Do not write inline comments. Anticipate my intent and introduce useful ideas that I clearly have not considered.\"\nengine = \"gpt-3.5-turbo\"\n\nclass ChatBot:\n    def __init__(self, master):\n        self.master = master\n        master.title(\"ChatGPT\")\n        master.configure(bg=\"#000\")\n        master.state(\"zoomed\")\n        \n        self.chat_box = Text(master, wrap=WORD, width=80, height=20, fg=\"#555\", bg=\"#000\", font=(\"Arial\", 14))\n        self.chat_box.grid(row=0, column=0, sticky=N+S+E+W)\n        self.chat_box.tag_configure(\"user\", foreground=\"#555\")\n        self.chat_box.tag_configure(\"bot\", foreground=\"#997755\")\n        self.chat_box.tag_configure(\"system\", foreground=\"#FFFF00\")\n\n        self.input_box = Text(master, wrap=WORD, width=80, height=1, fg=\"#888\", bg=\"#333\", font=(\"Arial\", 14))\n        self.input_box.grid(row=1, column=0, sticky=N+S+E+W, pady=20)\n        self.input_box.bind(\"<Shift-Return>\", self.insert_line)\n        self.input_box.bind(\"<KeyRelease>\", self.resize_input_box)\n        self.input_box.bind(\"<Return>\", self.send_message)\n        self.input_box.focus_set()\n\n        self.engine = engine\n        self.history = [{\"role\": \"system\", \"content\": preprompt}]\n        \n            \n        self.history_file = f\"history_{datetime.now().strftime('%Y-%m-%d_%H%M%S')}.json\"\n        self.history_path = os.path.join(os.getcwd(), self.history_file)\n        self.save_history()\n\n        self.history_json_files = sorted([f for f in os.listdir(os.getcwd()) if f.startswith(\"history_\")])\n        self.history_menu_var = StringVar()\n        self.history_menu_var.set(\"History\")\n        self.history_menu = OptionMenu(master, self.history_menu_var, *self.history_json_files, command=self.load_history)\n        self.history_menu.grid(row=1, column=1, sticky=N+S+W, padx=10, pady=20)\n        self.display_history()\n\n        master.grid_rowconfigure(0, weight=1)\n        master.grid_columnconfigure(0, weight=1)\n        \n    def save_history(self):\n        with open(self.history_file, 'w') as f:\n            json.dump(self.history, f)\n\n    def load_history(self, filename):\n        with open(filename, 'r') as f:\n            self.history = json.load(f)\n        self.display_history()\n        \n    def insert_line(self, event):\n        self.input_box.insert(INSERT, \"\\n\")\n        return \"break\"\n\n    def resize_input_box(self, event):\n        lines = self.input_box.get(\"1.0\", \"end-1c\").split(\"\\n\")\n        self.input_box.config(height=len(lines))\n        \n    def send_message(self, event):\n        in_content = self.input_box.get(\"1.0\", \"end\").strip()\n        self.input_box.config(height=1)\n        self.input_box.delete(\"1.0\", END)\n        self.input_box.update_idletasks()\n\n        self.history.append({\"role\": \"user\", \"content\": in_content})\n        self.save_history()\n\n        # Create a new thread to run the GPT method\n        t = threading.Thread(target=self.get_response, args=(self.engine, self.history))\n        t.start()\n\n    def get_response(self, engine, history):\n        # Call the GPT method to get a response from the OpenAI API\n        response = self.GPT(engine, history)\n        out_content = response[\"choices\"][0][\"message\"][\"content\"]\n        self.history.append({\"role\": \"assistant\", \"content\": out_content})\n        self.save_history()\n\n        # Update the chat history in the main thread\n        self.master.after(0, self.display_history)\n\n    def GPT(self, engine, history):\n        return openai.ChatCompletion.create(\n                model = engine,\n                messages = history\n            )\n\n    def display_history(self):\n        self.chat_box.delete(\"1.0\", END)\n        for entry in self.history:\n            role = entry[\"role\"]\n            content = entry[\"content\"]\n            if role == \"system\":\n                self.chat_box.insert(END, f\"PREPROMPT = [{content}]\\n\\n\", \"system\")\n            elif role == \"user\":\n                self.chat_box.insert(END, f\"{content}\\n\\n\", \"user\")\n            elif role == \"assistant\":\n                self.chat_box.insert(END, f\"{content}\\n\\n\", \"bot\")\n        self.chat_box.see(END)\n\n\nroot = Tk()\nmy_gui = ChatBot(root)\nroot.mainloop()"}, {"role": "assistant", "content": "1. Remove line 1 and 2 (import statement and engine variable declaration) since engine is hardcoded and imported in the GPT() method.\n2. Remove line 18 and 19 which sets the window state to maximized, as it may not be the desired behavior.\n3. Remove the triple quotes at line 25 since it explains code that is not there.\n4. Remove the insert_line() method in line 34 and the corresponding key binding in line 36 since it is not necessary.\n5. Remove the resize_input_box() method in line 40 and corresponding binding in line 42 since it is not necessary.\n6. Change line 45 to \"in_content = self.input_box.get(\"1.0\", END).strip()\"\n7. Remove line 46 and 47.\n8. Move the call to the GPT() method from a new thread to the main thread, i.e. line 50 to 55.\n9. Change the GPT() method to receive a messages parameter instead of history since it is a more intuitive variable name.\n10. Change the GPT() method to include the hardcoded engine string as parameter since it have less risk of a typo.\n11. Add a check to see if there are any messages in the history list before calling the API, else it will crash the program."}]