[{"role": "system", "content": "Prioritize accuracy, clarity, eloquence, and brevity. Ask questions to clarify ambiguity or introduce ideas I seem not to know about."}, {"role": "user", "content": "from tkinter import *\nimport openai\nimport threading\nfrom datetime import datetime\nimport json\nimport os\n\nclass ChatBot:\n    def __init__(self, master):\n        self.master = master\n        master.title(\"ChatGPT\")\n        master.configure(bg=\"#000\")\n        \n        self.preprompt = \"Prioritize accuracy, clarity, eloquence, and brevity. Ask questions to clarify ambiguity or introduce ideas I seem not to know about.\"\n        self.engine = \"gpt-3.5-turbo\"\n        master.state(\"zoomed\")\n\n        self.history = [{\"role\": \"system\", \"content\": self.preprompt}]\n        self.history_file = f\"history_{datetime.now().strftime('%Y-%m-%d_%H%M%S')}.json\"\n        self.save_history()\n\n        self.history_json_files = sorted([f for f in os.listdir(os.getcwd()) if f.startswith(\"history_\")])\n        self.history_menu_var = StringVar()\n        self.history_menu_var.set(\"History\")\n        \n        self.chat_box = Text(master, wrap=WORD, width=80, height=20, fg=\"#555\", bg=\"#000\", font=(\"Arial\", 14))\n        self.chat_box.grid(row=0, column=0, sticky=N+S+E+W)\n        self.chat_box.tag_configure(\"user\", foreground=\"#555\")\n        self.chat_box.tag_configure(\"bot\", foreground=\"#997755\")\n        self.chat_box.tag_configure(\"system\", foreground=\"#FFFF00\")\n\n        self.input_box = Text(master, wrap=WORD, width=80, height=1, fg=\"#888\", bg=\"#333\", font=(\"Arial\", 14))\n        self.input_box.grid(row=1, column=0, sticky=N+S+E+W, pady=20)\n        self.input_box.bind(\"<Shift-Return>\", self.insert_line)\n        self.input_box.bind(\"<KeyRelease>\", self.resize_input_box)\n        self.input_box.bind(\"<Return>\", self.send_message)\n        self.input_box.focus_set()\n\n        # Create menu bar\n        menu = Menu(master)\n\n        # Create history menu\n        history_menu = Menu(menu, tearoff=0)\n\n        # Loop through history JSON files and add them to the dropdown menu with file size in KB\n        for history_file in self.history_json_files:\n            # Get file size in KB\n            file_size = os.path.getsize(history_file) // 1024\n            \n            # Add file to dropdown menu\n            history_menu.add_command(label=f\"{history_file} ({file_size} KB)\", command=lambda hf=history_file: self.load_history(hf))\n\n        menu.add_cascade(label=\"History\", menu=history_menu)\n\n        master.config(menu=menu)\n\n        # Create text area and input box widgets\n        self.chat_box = Text(master, wrap=WORD, width=80, height=20, fg=\"#555\", bg=\"#000\", font=(\"Arial\", 14))\n        self.chat_box.grid(row=0, column=0, sticky=N+S+E+W)\n        self.chat_box.tag_configure(\"user\", foreground=\"#555\")\n        self.chat_box.tag_configure(\"bot\", foreground=\"#997755\")\n        self.chat_box.tag_configure(\"system\", foreground=\"#FFFF00\")\n\n        self.input_box = Text(master, wrap=WORD, width=80, height=1, fg=\"#888\", bg=\"#333\", font=(\"Arial\", 14))\n        self.input_box.grid(row=1, column=0, sticky=N+S+E+W, pady=20)\n        self.input_box.bind(\"<Shift-Return>\", self.insert_line)\n        self.input_box.bind(\"<KeyRelease>\", self.resize_input_box)\n        self.input_box.bind(\"<Return>\", self.send_message)\n        self.input_box.focus_set()\n\n        master.grid_columnconfigure(0, weight=1)\n        master.grid_rowconfigure(0, weight=1)\n        master.grid_rowconfigure(1, weight=0)\n\n        # Style the menu bar\n        master.option_add('*Menu*activeBackground', '#333')\n        master.option_add('*Menu*activeForeground', '#FFF')\n        master.option_add('*Menu*background', '#333')\n        master.option_add('*Menu*foreground', '#FFF')\n        master.bind('<Alt_L>', lambda event: menu.focus_set())\n\n        master.grid_rowconfigure(0, weight=1)\n        master.grid_columnconfigure(0, weight=1)\n        \n    def save_history(self):\n        with open(self.history_file, 'w') as f:\n            json.dump(self.history, f)\n\n    def load_history(self, filename):\n        with open(filename, 'r') as f:\n            self.history = json.load(f)\n        self.display_history()\n        \n    def insert_line(self, event):\n        self.input_box.insert(INSERT, \"\\n\")\n        return \"break\"\n\n    def resize_input_box(self, event):\n        lines = self.input_box.get(\"1.0\", \"end-1c\").split(\"\\n\")\n        self.input_box.config(height=len(lines))\n        \n    def send_message(self, event):\n        in_content = f'{self.input_box.get(\"1.0\", \"end\").strip()}'\n        self.input_box.config(height=1)\n        self.input_box.delete(\"1.0\", END)\n        self.input_box.update_idletasks()\n\n        self.history.append({\"role\": \"user\", \"content\": in_content})\n        self.save_history()\n\n        # Create a new thread to run the GPT method\n        t = threading.Thread(target=self.get_response, args=(self.engine, self.history))\n        t.start()\n\n    def get_response(self, engine, history):\n        # Call the GPT method to get a response from the OpenAI API\n        response = self.GPT(engine, history)\n        out_content = response[\"choices\"][0][\"message\"][\"content\"]\n        self.history.append({\"role\": \"assistant\", \"content\": out_content})\n        self.save_history()\n\n        # Update the chat history in the main thread\n        self.master.after(0, self.display_history)\n\n    def GPT(self, engine, history):\n        return openai.ChatCompletion.create(\n                model = engine,\n                messages = history\n            )\n\n    def display_history(self):\n        self.chat_box.delete(\"1.0\", END)\n        for entry in self.history:\n            role = entry[\"role\"]\n            content = entry[\"content\"]\n            if role == \"system\":\n                self.chat_box.insert(END, f\"PREPROMPT = [{content}]\\n\\n\", \"system\")\n            elif role == \"user\":\n                self.chat_box.insert(END, f\"{content}\\n\\n\", \"user\") # how to display > at start of each newline\n            elif role == \"assistant\":\n                self.chat_box.insert(END, f\"{content}\\n\\n\", \"bot\")\n        self.chat_box.see(END)\n\n\nroot = Tk()\nmy_gui = ChatBot(root)\nroot.mainloop()"}, {"role": "assistant", "content": "This is a Python program that implements a GUI chatbot using the OpenAI API. The chatbot uses the GPT (Generative Pre-trained Transformer) neural network to generate responses to user input. The chat history is saved to a JSON file and can be loaded from previous sessions. The GUI is implemented using the Tkinter library. When the user types a message and presses Enter, the program uses a separate thread to send the message to the OpenAI API and receive a response, so that the GUI remains responsive while the chatbot processes the input. The chat history is displayed in a text area, with system messages (such as the prompt) displayed in yellow, user messages in gray, and bot responses in brown."}, {"role": "user", "content": "how to store/save/load json files in subdir `history` instead of in current directory"}, {"role": "assistant", "content": "To store/save/load the JSON files in a subdirectory named `history`, you can modify the `__init__` method to check whether the subdirectory exists and create it if it does not exist. Then, you can modify the `save_history` and `load_history` methods to use the `history` subdirectory when storing and loading the JSON files. Here is an example modification to the `__init__` method:\n\n```\nimport os\n\nclass ChatBot:\n    def __init__(self, master):\n        self.master = master\n        master.title(\"ChatGPT\")\n        master.configure(bg=\"#000\")\n        \n        self.preprompt = \"Prioritize accuracy, clarity, eloquence, and brevity. Ask questions to clarify ambiguity or introduce ideas I seem not to know about.\"\n        self.engine = \"gpt-3.5-turbo\"\n        master.state(\"zoomed\")\n\n        # Create history subdirectory if it does not exist\n        if not os.path.exists('history'):\n            os.mkdir('history')\n\n        self.history_dir = 'history/'\n        self.history_file = f\"{self.history_dir}history_{datetime.now().strftime('%Y-%m-%d_%H%M%S')}.json\"\n        self.save_history()\n\n        self.history_json_files = sorted([f for f in os.listdir(self.history_dir) if f.startswith(\"history_\")])\n        self.history_menu_var = StringVar()\n        self.history_menu_var.set(\"History\")\n\n        # Rest of __init__ method continues...\n```\n\nNote that we added a new variable `history_dir` to hold the name of the subdirectory, and we modified the `history_file` variable to concatenate the subdirectory name with the file name. We also modified the `self.history_json_files` line to use the `history_dir` variable, so that it searches for files in the subdirectory. \n\nNext, here is an example modification to the `save_history` and `load_history` methods:\n\n```\nclass ChatBot:\n    def __init__(self, master):\n        # Rest of __init__ method code continues...\n\n    def save_history(self):\n        with open(self.history_file, 'w') as f:\n            json.dump(self.history, f)\n\n    def load_history(self, filename):\n        with open(self.history_dir + filename, 'r') as f:\n            self.history = json.load(f)\n        self.display_history()\n```\n\nNote that we modified the `self.history_file` variable in the `save_history` method to concatenate the subdirectory name with the file name. Similarly, we modified the `open` function in the `load_history` method to use the subdirectory name when opening the file. These changes ensure that the JSON files are saved to and loaded from the `history` subdirectory."}]